/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ops4j.pax.exam.container.eclipse.impl.parser;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.ops4j.pax.exam.container.eclipse.impl.ArtifactInfo;
import org.osgi.framework.Version;

/**
 * Parses a "SimpleConfiguration" file generated by eclipse see
 * https://github.com/eclipse/rt.equinox.p2/tree/master/bundles/org.eclipse.equinox.simpleconfigurator
 * 
 * @author Christoph LÃ¤ubrich
 *
 */
public class SimpleConfigurationParser {

    private final List<ArtifactInfo<RuntimeOption>> items = new ArrayList<>();

    public SimpleConfigurationParser(InputStream stream) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("#") || line.trim().isEmpty()) {
                    continue;
                }
                String[] bundleInfo = line.split(",");
                String bsn = bundleInfo[0];
                Version version = AbstractParser.stringToVersion(bundleInfo[1]);
                items.add(new ArtifactInfo<RuntimeOption>(bsn, version, new RuntimeOption(
                    Boolean.valueOf(bundleInfo[4]), Integer.parseInt(bundleInfo[3]))));
            }
        }
    }

    public List<ArtifactInfo<RuntimeOption>> getItems() {
        return Collections.unmodifiableList(items);
    }

    public static final class RuntimeOption {

        private final boolean start;
        private final int startlevel;

        public RuntimeOption(boolean start, int startlevel) {
            super();
            this.start = start;
            this.startlevel = startlevel;
        }

        public boolean isStart() {
            return start;
        }

        public int getStartlevel() {
            return startlevel;
        }
    }
}
